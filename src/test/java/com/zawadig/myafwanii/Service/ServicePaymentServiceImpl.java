package com.zawadig.myafwanii.Service;

import com.zawadig.myafwanii.Repository.RequestFormRepository;
import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
import com.zawadig.myafwanii.dto.RequestPaymentDTO;
import com.zawadig.myafwanii.enums.PaymentStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

////////////////package com.zawadig.myafwanii.Service;
////////////////
////////////////import com.zawadig.myafwanii.Model.ServicePayment;
////////////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////////////////import org.springframework.beans.factory.annotation.Autowired;
////////////////import org.springframework.stereotype.Service;
////////////////
////////////////import java.time.LocalDateTime;
////////////////import java.util.UUID;
////////////////
////////////////@Service
////////////////public class ServicePaymentServiceImpl implements ServicePaymentService {
////////////////
////////////////    @Autowired
////////////////    private ServicePaymentRepository servicePaymentRepository;
////////////////
////////////////    @Override
////////////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount) {
////////////////        ServicePayment payment = new ServicePayment();
////////////////
////////////////        payment.setCustomerId(customerId);
////////////////        payment.setServiceType(serviceType);
////////////////        payment.setAmount(amount);
////////////////        payment.setPaymentStatus("UNPAID"); // Hapo mtu hajalipa bado
////////////////        payment.setControlNumber(generateControlNumber());
////////////////        payment.setCreatedAt(LocalDateTime.now());
////////////////        payment.setDeleted(false);
////////////////
////////////////        return servicePaymentRepository.save(payment);
////////////////    }
////////////////
////////////////    @Override
////////////////    public ServicePayment confirmPayment(String controlNumber) {
////////////////        ServicePayment payment = servicePaymentRepository.findByControlNumber(controlNumber)
////////////////                .orElseThrow(() -> new IllegalArgumentException("Control number si sahihi au haipo"));
////////////////
////////////////        payment.setPaymentStatus("PAID");
////////////////        payment.setPaymentDate(LocalDateTime.now());
////////////////        payment.setUpdatedAt(LocalDateTime.now());
////////////////
////////////////        return servicePaymentRepository.save(payment);
////////////////    }
////////////////
////////////////    @Override
////////////////    public ServicePayment getPaymentStatus(String controlNumber) {
////////////////        return servicePaymentRepository.findByControlNumber(controlNumber)
////////////////                .orElseThrow(() -> new IllegalArgumentException("Control number haipo"));
////////////////    }
////////////////
////////////////    private String generateControlNumber() {
////////////////        return "ZAWA-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
////////////////    }
////////////////}
//////////////package com.zawadig.myafwanii.Service;
//////////////
//////////////import com.zawadig.myafwanii.Model.ServicePayment;
//////////////import com.zawadig.myafwanii.Model.ServicePayment.PaymentStatus;
//////////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//////////////import org.springframework.beans.factory.annotation.Autowired;
//////////////import org.springframework.stereotype.Service;
//////////////
//////////////import java.math.BigDecimal;
//////////////import java.sql.Timestamp;
//////////////import java.util.UUID;
//////////////
//////////////@Service
//////////////public class ServicePaymentServiceImpl implements ServicePaymentService {
//////////////
//////////////    @Autowired
//////////////    private ServicePaymentRepository servicePaymentRepository;
//////////////
//////////////    @Override
//////////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount) {
//////////////        ServicePayment payment = new ServicePayment();
//////////////
//////////////        payment.setCustomerId(customerId);
//////////////        payment.setServiceType(serviceType);
//////////////        payment.setAmountPaid(BigDecimal.valueOf(amount));  // Tumia amountPaid kama BigDecimal
//////////////        payment.setPaymentStatus(PaymentStatus.UNPAID);    // Tumia enum PaymentStatus
//////////////        payment.setControlNumber(generateControlNumber());
//////////////        payment.setDeleted(false);
//////////////        // createdAt na updatedAt handled by DB (autogenerated)
//////////////
//////////////        return servicePaymentRepository.save(payment);
//////////////    }
//////////////
//////////////    @Override
//////////////    public ServicePayment confirmPayment(String controlNumber) {
//////////////        ServicePayment payment = servicePaymentRepository.findByControlNumber(controlNumber)
//////////////                .orElseThrow(() -> new IllegalArgumentException("Control number si sahihi au haipo"));
//////////////
//////////////        payment.setPaymentStatus(PaymentStatus.PAID);
//////////////        payment.setPaymentDate(new Timestamp(System.currentTimeMillis()).toLocalDateTime());  // Timestamp sasa
//////////////        // updatedAt handled by DB
//////////////
//////////////        return servicePaymentRepository.save(payment);
//////////////    }
//////////////
//////////////    @Override
//////////////    public ServicePayment getPaymentStatus(String controlNumber) {
//////////////        return servicePaymentRepository.findByControlNumber(controlNumber)
//////////////                .orElseThrow(() -> new IllegalArgumentException("Control number haipo"));
//////////////    }
//////////////
//////////////    private String generateControlNumber() {
//////////////        return "ZAWA-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
//////////////    }
//////////////}
////////////package com.zawadig.myafwanii.Service;
////////////
////////////import com.zawadig.myafwanii.Model.ServicePayment;
////////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////////////import org.springframework.beans.factory.annotation.Autowired;
////////////import org.springframework.stereotype.Service;
////////////
////////////import java.math.BigDecimal;
////////////import java.time.LocalDateTime;
////////////import java.util.Optional;
////////////import java.util.UUID;
////////////
////////////@Service
////////////public class ServicePaymentServiceImpl implements ServicePaymentService {
////////////
////////////    private final ServicePaymentRepository servicePaymentRepository;
////////////
////////////    @Autowired
////////////    public ServicePaymentServiceImpl(ServicePaymentRepository servicePaymentRepository) {
////////////        this.servicePaymentRepository = servicePaymentRepository;
////////////    }
////////////
////////////    @Override
////////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount) {
////////////        ServicePayment payment = new ServicePayment();
////////////
////////////        payment.setCustomerId(customerId);
////////////        payment.setServiceType(serviceType);
////////////        payment.setAmountPaid(BigDecimal.valueOf(amount)); // Sets both amount_paid and amount
////////////        payment.setPaymentStatus(ServicePayment.PaymentStatus.UNPAID);
////////////        payment.setControlNumber(generateControlNumber());
////////////        payment.setDeleted(false);
////////////
////////////        return servicePaymentRepository.save(payment);
////////////    }
////////////
////////////    @Override
////////////    public ServicePayment confirmPayment(String controlNumber) {
////////////        Optional<ServicePayment> paymentOpt = servicePaymentRepository.findByControlNumber(controlNumber);
////////////
////////////        if (paymentOpt.isEmpty()) {
////////////            throw new IllegalArgumentException("Control number si sahihi au haipo");
////////////        }
////////////
////////////        ServicePayment payment = paymentOpt.get();
////////////        payment.setPaymentStatus(ServicePayment.PaymentStatus.PAID);
////////////        payment.setPaymentDate(LocalDateTime.now());
////////////
////////////        return servicePaymentRepository.save(payment);
////////////    }
////////////
////////////    @Override
////////////    public ServicePayment getPaymentStatus(String controlNumber) {
////////////        return servicePaymentRepository.findByControlNumber(controlNumber)
////////////                .orElseThrow(() -> new IllegalArgumentException("Control number haipo"));
////////////    }
////////////
////////////    private String generateControlNumber() {
////////////        return "ZAWA-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
////////////    }
////////////}
//////////package com.zawadig.myafwanii.Service;
//////////
//////////import com.zawadig.myafwanii.Model.ServicePayment;
//////////import com.zawadig.myafwanii.Repository.CustomerRepository;
//////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//////////import jakarta.transaction.Transactional;
//////////import org.springframework.beans.factory.annotation.Autowired;
//////////import org.springframework.stereotype.Service;
//////////
//////////import java.math.BigDecimal;
//////////import java.time.LocalDateTime;
//////////import java.util.Optional;
//////////import java.util.UUID;
//////////
//////////@Service
//////////public class ServicePaymentServiceImpl implements ServicePaymentService {
//////////
//////////    @Autowired
//////////    private ServicePaymentRepository servicePaymentRepository;
//////////
//////////    @Autowired
//////////    private CustomerRepository customerRepository;
//////////
//////////    @Override
//////////    @Transactional
//////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount) {
//////////        ServicePayment payment = new ServicePayment();
//////////        payment.setCustomer(customerRepository.findById(customerId).orElseThrow());
//////////        payment.setAmountPaid(BigDecimal.valueOf(amount));
//////////        payment.setServiceType(serviceType);
//////////        payment.setCreatedAt(LocalDateTime.now());
//////////        payment.setControlNumber(generateControlNumber());
//////////        payment.setStatus("PENDING");
//////////
//////////        return servicePaymentRepository.save(payment);
//////////    }
//////////
//////////    @Override
//////////    public ServicePayment confirmPayment(String controlNumber) {
//////////        Optional<ServicePayment> optional = servicePaymentRepository.findByControlNumber(controlNumber);
//////////        if (optional.isPresent()) {
//////////            ServicePayment payment = optional.get();
//////////            payment.setStatus("CONFIRMED");
//////////            return servicePaymentRepository.save(payment);
//////////        } else {
//////////            throw new RuntimeException("Payment not found with control number: " + controlNumber);
//////////        }
//////////    }
//////////
//////////    @Override
//////////    public ServicePayment getPaymentStatus(String controlNumber) {
//////////        return servicePaymentRepository.findByControlNumber(controlNumber)
//////////                .orElseThrow(() -> new RuntimeException("Payment not found with control number: " + controlNumber));
//////////    }
//////////
//////////    private String generateControlNumber() {
//////////        return UUID.randomUUID().toString().substring(0, 12).replace("-", "").toUpperCase();
//////////    }
//////////}
////////package com.zawadig.myafwanii.Service;
////////
////////import com.zawadig.myafwanii.Model.ServicePayment;
////////import com.zawadig.myafwanii.Model.ServicePayment.PaymentStatus;
////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////////import org.springframework.beans.factory.annotation.Autowired;
////////import org.springframework.stereotype.Service;
////////
////////import java.math.BigDecimal;
////////import java.sql.Timestamp;
////////import java.util.UUID;
////////
////////@Service
////////public class ServicePaymentServiceImpl implements ServicePaymentService {
////////
////////    @Autowired
////////    private ServicePaymentRepository servicePaymentRepository;
////////
////////    @Override
////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount) {
////////        ServicePayment payment = new ServicePayment();
////////        payment.setRequestId(UUID.randomUUID().toString());
////////        payment.setCustomerId(customerId);
////////        payment.setServiceType(serviceType);
////////        payment.setAmount(BigDecimal.valueOf(amount));
////////        payment.setControlNumber(generateControlNumber());
////////        payment.setPaymentStatus(PaymentStatus.UNPAID);
////////        payment.setCreatedAt(new Timestamp(System.currentTimeMillis()));
////////
////////        return servicePaymentRepository.save(payment);
////////    }
////////
////////    @Override
////////    public ServicePayment confirmPayment(String controlNumber) {
////////        ServicePayment payment = servicePaymentRepository.findByControlNumber(controlNumber);
////////        if (payment != null) {
////////            payment.setPaymentStatus(PaymentStatus.PAID);
////////            payment.setPaymentDate(new Timestamp(System.currentTimeMillis()));
////////            return servicePaymentRepository.save(payment);
////////        }
////////        return null;
////////    }
////////
////////    @Override
////////    public ServicePayment getPaymentStatus(String controlNumber) {
////////        return servicePaymentRepository.findByControlNumber(controlNumber);
////////    }
////////
////////    private String generateControlNumber() {
////////        return "ZAWA-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
////////    }
////////}
////////package com.zawadig.myafwanii.Service;
////////
////////import com.zawadig.myafwanii.Model.ServicePayment;
////////import com.zawadig.myafwanii.Model.ServicePayment.PaymentStatus;
////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////////import org.springframework.beans.factory.annotation.Autowired;
////////import org.springframework.stereotype.Service;
////////
////////import java.math.BigDecimal;
////////import java.sql.Timestamp;
////////import java.util.Optional;
////////import java.util.UUID;
////////
////////@Service
////////public class ServicePaymentServiceImpl implements ServicePaymentService {
////////
////////    @Autowired
////////    private ServicePaymentRepository servicePaymentRepository;
////////
////////    @Override
////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount) {
////////        ServicePayment payment = new ServicePayment();
////////        payment.setRequestId(UUID.randomUUID().toString());
////////        payment.setCustomerId(customerId);
////////        payment.setServiceType(serviceType);
////////        payment.setAmount(BigDecimal.valueOf(amount));
//////////        payment.setAmountPaid(BigDecimal.ZERO); // default value until payment is confirmed
////////        payment.setPaymentStatus(PaymentStatus.UNPAID);
////////        payment.setControlNumber(generateControlNumber());
////////        payment.setCreatedAt(new Timestamp(System.currentTimeMillis()).toLocalDateTime());
////////
////////        return servicePaymentRepository.save(payment);
////////    }
////////
////////    @Override
////////    public ServicePayment confirmPayment(String controlNumber) {
////////        Optional<ServicePayment> paymentOpt = servicePaymentRepository.findByControlNumber(controlNumber);
////////        if (paymentOpt.isEmpty()) {
////////            throw new IllegalArgumentException("Control number haipo au si sahihi.");
////////        }
////////
////////        ServicePayment payment = paymentOpt.get();
////////        payment.setPaymentStatus(PaymentStatus.PAID);
////////        payment.setPaymentDate(new Timestamp(System.currentTimeMillis()).toLocalDateTime());
//////////        payment.setAmountPaid(payment.getAmount());
////////
////////        return servicePaymentRepository.save(payment);
////////    }
////////
////////    @Override
////////    public ServicePayment getPaymentStatus(String controlNumber) {
////////        return servicePaymentRepository.findByControlNumber(controlNumber)
////////                .orElseThrow(() -> new IllegalArgumentException("Control number haipo"));
////////    }
////////
////////    @Override
////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount, String paymentMethod, String phone) {
////////        return null;
////////    }
////////
////////    @Override
////////    public ServicePayment requestPayment(Long customerId, String serviceType, Double amount, String paymentMethod, String phone, String controlNumber) {
////////        return null;
////////    }
////////
////////    private String generateControlNumber() {
////////        return "ZAWA-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
////////    }
////////}
//////
////////package com.zawadig.myafwanii.Service;
////////
////////import com.zawadig.myafwanii.Model.ServicePayment;
////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////////import com.zawadig.myafwanii.Service.ServicePaymentService;
////////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
////////import com.zawadig.myafwanii.enums.PaymentStatus;
////////import com.zawadig.myafwanii.Model.ServicePayment;
////////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////////import com.zawadig.myafwanii.Service.ServicePaymentService;
////////
////////import org.springframework.beans.factory.annotation.Autowired;
////////import org.springframework.stereotype.Service;
////////
////////import java.math.BigDecimal;
////////import java.time.LocalDateTime;
////////import java.util.UUID;
////////
////////@Service
////////public class ServicePaymentServiceImpl implements ServicePaymentService {
////////
////////    @Autowired
////////    private ServicePaymentRepository paymentRepository;
////////
////////    @Override
////////    public ServicePayment createPayment(RequestPaymentDTO request) {
////////        ServicePayment payment = new ServicePayment();
////////        payment.setCustomerId(request.getCustomerId());
////////        payment.setAmountPaid(request.getAmount()); // Kutoka DTO
////////        payment.setAmount(new BigDecimal("50000")); // Fixed price
////////        payment.setPaymentMethod(request.getPaymentMethod());
////////        payment.setServiceType(request.getServiceType());
////////        payment.setPhone(request.getPhone());
////////        payment.setControlNumber(generateControlNumber());
////////        payment.setPaymentStatus(ServicePayment.PaymentStatus.PENDING);
////////        payment.setPaymentDate(LocalDateTime.now());
////////
////////        return paymentRepository.save(payment);
////////    }
////////
////////    private String generateControlNumber() {
////////        return UUID.randomUUID().toString().replace("-", "").substring(0, 12);
////////    }
////////}
//////package com.zawadig.myafwanii.Service;
//////
//////import com.zawadig.myafwanii.Model.ServicePayment;
//////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//////import com.zawadig.myafwanii.enums.PaymentStatus;
//////
//////import org.springframework.beans.factory.annotation.Autowired;
//////import org.springframework.stereotype.Service;
//////
//////import java.math.BigDecimal;
//////import java.time.LocalDateTime;
//////import java.util.UUID;
//////
//////@Service
//////public class ServicePaymentServiceImpl implements ServicePaymentService {
//////
//////    @Autowired
//////    private ServicePaymentRepository paymentRepository;
//////
//////    @Override
//////    public ServicePayment createPayment(RequestPaymentDTO request) {
//////        ServicePayment payment = new ServicePayment();
//////        payment.setCustomerId(request.getCustomerId());
//////
//////        // Convert Double amount from DTO to BigDecimal
//////        payment.setAmountPaid(BigDecimal.valueOf(request.getAmount()));
//////
//////        payment.setAmount(new BigDecimal("50000")); // Fixed price
//////        payment.setPaymentMethod(request.getPaymentMethod());
//////        payment.setServiceType(request.getServiceType());
//////        payment.setPhone(request.getPhone());
//////        payment.setControlNumber(generateControlNumber());
//////
//////        // Use PaymentStatus enum correctly
//////        payment.setPaymentStatus(PaymentStatus.PENDING);
//////
//////        payment.setPaymentDate(LocalDateTime.now());
//////
//////        return paymentRepository.save(payment);
//////    }
//////
//////    @Override
//////    public ServicePayment RequestPayment(Long customerId, String serviceType, Double amount, String paymentMethod, String phone, String controlNumber) {
//////        return null;
//////    }
//////
//////    private String generateControlNumber() {
//////        return UUID.randomUUID().toString().replace("-", "").substring(0, 12);
//////    }
//////}
////package com.zawadig.myafwanii.Service;
////
////import com.zawadig.myafwanii.Model.ServicePayment;
////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
////import com.zawadig.myafwanii.enums.PaymentStatus;
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.stereotype.Service;
////
////import java.math.BigDecimal;
////import java.time.LocalDateTime;
////import java.util.Optional;
////
////@Service
////public class ServicePaymentServiceImpl implements ServicePaymentService {
////
////    @Autowired
////    private ServicePaymentRepository paymentRepository;
////
////    @Override
////    public ServicePayment createPayment(RequestPaymentDTO dto, String controlNumber) {
////        ServicePayment payment = new ServicePayment();
////        payment.setCustomerId(dto.getCustomerId());
////        payment.setServiceType(dto.getServiceType());
////        payment.setAmountPaid(BigDecimal.valueOf(dto.getAmount()));
////        payment.setAmount(new BigDecimal("50000")); // fixed price, au weka dto.getAmount() kama unataka
////        payment.setPaymentMethod(dto.getPaymentMethod());
////        payment.setPhone(dto.getPhone());
////        payment.setControlNumber(controlNumber);
////        payment.setPaymentStatus(PaymentStatus.PENDING);
////        payment.setPaymentDate(LocalDateTime.now());
////
////        return paymentRepository.save(payment);
////    }
////
////    @Override
////    public ServicePayment getPaymentByControlNumber(String controlNumber) {
////        Optional<ServicePayment> paymentOpt = paymentRepository.findByControlNumber(controlNumber);
////        return paymentOpt.orElse(null);
////    }
////}
////package com.zawadig.myafwanii.Service;
////
////import com.zawadig.myafwanii.Model.ServicePayment;
////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
////import com.zawadig.myafwanii.enums.PaymentStatus;
////
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.stereotype.Service;
////
////import java.math.BigDecimal;
////import java.time.LocalDateTime;
////import java.util.UUID;
////
////@Service
////public class ServicePaymentServiceImpl implements ServicePaymentService {
////
////    @Autowired
////    private ServicePaymentRepository paymentRepository;
////
////    @Override
////    public ServicePayment createPayment(RequestPaymentDTO dto, String controlNumber) {
////        if (dto.getRequestId() == null) {
////            throw new IllegalArgumentException("Request ID haipaswi kuwa null");
////        }
////
////        ServicePayment payment = new ServicePayment();
////        payment.setRequestId(String.valueOf(dto.getRequestId()));  // Assuming requestId is stored as String in DB
////        payment.setCustomerId(dto.getCustomerId());
////        payment.setAmountPaid(BigDecimal.valueOf(dto.getAmount()));
////        payment.setAmount(new BigDecimal("50000")); // Fixed price kama unataka
////        payment.setPaymentMethod(dto.getPaymentMethod());
////        payment.setServiceType(dto.getServiceType());
////        payment.setPhone(dto.getPhone());
////        payment.setControlNumber(controlNumber);
////        payment.setPaymentStatus(PaymentStatus.PENDING);
////        payment.setPaymentDate(LocalDateTime.now());
////
////        return paymentRepository.save(payment);
////    }
////
////    // Ikiwa unahitaji control number generator
////    public String generateControlNumber() {
////        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
////    }
////}
////package com.zawadig.myafwanii.Service;
////
////import com.zawadig.myafwanii.Model.ServicePayment;
////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
////import com.zawadig.myafwanii.enums.PaymentStatus;
////
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.stereotype.Service;
////
////import java.math.BigDecimal;
////import java.time.LocalDateTime;
////import java.util.Optional;
////import java.util.UUID;
////
////@Service
////public class ServicePaymentServiceImpl implements ServicePaymentService {
////
////    @Autowired
////    private ServicePaymentRepository paymentRepository;
////
////    @Override
////    public ServicePayment createPayment(RequestPaymentDTO dto, String controlNumber) {
////        if (dto.getRequestId() == null) {
////            throw new IllegalArgumentException("Request ID haipaswi kuwa null");
////        }
////
////        ServicePayment payment = new ServicePayment();
////        payment.setRequestId(String.valueOf(dto.getRequestId()));  // Assuming requestId is stored as String in DB
////        payment.setCustomerId(dto.getCustomerId());
////        payment.setAmountPaid(BigDecimal.valueOf(dto.getAmount()));
////        payment.setAmount(new BigDecimal("50000")); // Fixed price kama unataka
////        payment.setPaymentMethod(dto.getPaymentMethod());
////        payment.setServiceType(dto.getServiceType());
////        payment.setPhone(dto.getPhone());
////        payment.setControlNumber(controlNumber);
////        payment.setPaymentStatus(PaymentStatus.PENDING);
////        payment.setPaymentDate(LocalDateTime.now());
////
////        return paymentRepository.save(payment);
////    }
////
//////    @Override
//////    public boolean verifyPayment(String controlNumber) {
//////        return false;
//////    }
////
////    // Generator ya control number
////    public String generateControlNumber() {
////        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
////    }
////
////    // ✅ Method ya ku-verify payment
////    @Override
////    public boolean verifyPayment(String controlNumber) {
////        Optional<ServicePayment> optionalPayment = paymentRepository.findByControlNumber(controlNumber);
////
////        if (optionalPayment.isPresent()) {
////            ServicePayment payment = optionalPayment.get();
////            payment.setPaymentStatus(PaymentStatus.VERIFIED);
////            paymentRepository.save(payment);
////            return true;
////        }
////
////        return false;
////    }
////
////    @Override
////    public ServicePayment getPaymentByControlNumber(String controlNumber) {
////        return null;
////    }
////}
////package com.zawadig.myafwanii.Service;
////
////import com.zawadig.myafwanii.Model.ServicePayment;
////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
////import com.zawadig.myafwanii.enums.PaymentStatus;
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.stereotype.Service;
////
////import java.math.BigDecimal;
////import java.time.LocalDateTime;
////import java.util.Optional;
////import java.util.UUID;
////
////@Service
////public class ServicePaymentServiceImpl implements ServicePaymentService {
////
////    @Autowired
////    private ServicePaymentRepository paymentRepository;
////
////    @Override
////    public ServicePayment createPayment(RequestPaymentDTO dto, String controlNumber) {
////        if (dto.getRequestId() == null) {
////            throw new IllegalArgumentException("Request ID haipaswi kuwa null");
////        }
////
////        ServicePayment payment = new ServicePayment();
////        payment.setRequestId(String.valueOf(dto.getRequestId())); // if DB uses String
////        payment.setCustomerId(dto.getCustomerId());
////        payment.setServiceType(dto.getServiceType());
////        payment.setPhone(dto.getPhone());
////        payment.setPaymentMethod(dto.getPaymentMethod());
////        payment.setAmountPaid(BigDecimal.valueOf(dto.getAmount()));
////        payment.setAmount(new BigDecimal("50000")); // fixed amount if required
////        payment.setControlNumber(controlNumber);
////        payment.setPaymentStatus(PaymentStatus.PENDING);
////        payment.setPaymentDate(LocalDateTime.now());
////
////        return paymentRepository.save(payment);
////    }
////
////    // Generator ya control number (random 12 chars)
////    public String generateControlNumber() {
////        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
////    }
////
////    // Verify payment by control number
////    @Override
////    public boolean verifyPayment(String controlNumber) {
////        Optional<ServicePayment> optionalPayment = paymentRepository.findByControlNumber(controlNumber);
////
////        if (optionalPayment.isPresent()) {
////            ServicePayment payment = optionalPayment.get();
////            payment.setPaymentStatus(PaymentStatus.VERIFIED);
////            paymentRepository.save(payment);
////            return true;
////        }
////
////        return false;
////    }
////
////    // Fetch payment by control number (optional method)
////    @Override
////    public ServicePayment getPaymentByControlNumber(String controlNumber) {
////        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
////    }
////}
////package com.zawadig.myafwanii.Service;
////
////import com.zawadig.myafwanii.Model.ServicePayment;
////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
////import com.zawadig.myafwanii.enums.PaymentStatus;
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.stereotype.Service;
////
////import java.math.BigDecimal;
////import java.time.LocalDateTime;
////import java.util.Optional;
////import java.util.UUID;
////
////@Service
////public class ServicePaymentServiceImpl implements ServicePaymentService {
////
////    @Autowired
////    private ServicePaymentRepository paymentRepository;
////
////    @Override
////    public ServicePayment createPayment(RequestPaymentDTO dto, String controlNumber) {
////        if (dto.getRequestId() == null) {
////            throw new IllegalArgumentException("Request ID haipaswi kuwa null");
////        }
////
////        ServicePayment payment = new ServicePayment();
////        payment.setRequestId(String.valueOf(dto.getRequestId())); // assuming DB expects String
////        payment.setCustomerId(dto.getCustomerId());
////        payment.setServiceType(dto.getServiceType());
////        payment.setPhone(dto.getPhone());
////        payment.setPaymentMethod(dto.getPaymentMethod());
////        payment.setAmountPaid(BigDecimal.valueOf(dto.getAmount()));
////        payment.setAmount(new BigDecimal("50000")); // fixed amount if required
////        payment.setControlNumber(controlNumber);
////        payment.setPaymentStatus(PaymentStatus.PENDING);
////        payment.setPaymentDate(LocalDateTime.now());
////
////        return paymentRepository.save(payment);
////    }
////
////    // Generator ya control number (random 12 chars)
////    public String generateControlNumber() {
////        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
////    }
////
////    // Verify payment by control number
////    @Override
////    public boolean verifyPayment(String controlNumber) {
////        Optional<ServicePayment> optionalPayment = paymentRepository.findByControlNumber(controlNumber);
////
////        if (optionalPayment.isPresent()) {
////            ServicePayment payment = optionalPayment.get();
////            if (payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
////                // payment tayari ime-verified, return true
////                return true;
////            }
////            payment.setPaymentStatus(PaymentStatus.VERIFIED);
////            // optionally set payment reference here if you want
////            paymentRepository.save(payment);
////            return true;
////        }
////
////        return false;
////    }
////
////    // Fetch payment by control number (optional method)
////    @Override
////    public ServicePayment getPaymentByControlNumber(String controlNumber) {
////        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
////    }
////}
////package com.zawadig.myafwanii.Service;
////
////import com.zawadig.myafwanii.Model.RequestForm;
////import com.zawadig.myafwanii.Model.ServicePayment;
////import com.zawadig.myafwanii.Repository.RequestFormRepository;
////import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
////import com.zawadig.myafwanii.dto.RequestPaymentDTO;
////import com.zawadig.myafwanii.enums.PaymentStatus;
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.stereotype.Service;
////
////import java.math.BigDecimal;
////import java.time.LocalDateTime;
////import java.util.Optional;
////import java.util.UUID;
////
////@Service
////public class ServicePaymentServiceImpl implements ServicePaymentService {
////
////    @Autowired
////    private ServicePaymentRepository paymentRepository;
////
////    @Autowired
////    private RequestFormRepository requestFormRepository;
////
////    @Override
////    public ServicePayment createPayment(RequestPaymentDTO dto, String controlNumber) {
////        if (dto.getRequestId() == null) {
////            throw new IllegalArgumentException("Request ID haipaswi kuwa null");
////        }
////
////        // Pata RequestForm entity kutoka DB, validate ipo
////        RequestForm requestForm = requestFormRepository.findById(dto.getRequestId())
////                .orElseThrow(() -> new IllegalArgumentException("RequestForm haipo: " + dto.getRequestId()));
////
////        ServicePayment payment = new ServicePayment();
////
////        payment.setRequestForm(requestForm);  // Set relation
////
////        payment.setCustomerId(dto.getCustomerId());
////        payment.setServiceType(dto.getServiceType());
////        payment.setPhone(dto.getPhone());
////        payment.setPaymentMethod(dto.getPaymentMethod());
////        payment.setAmountPaid(BigDecimal.valueOf(dto.getAmount()));
////        payment.setAmount(new BigDecimal("50000")); // fixed amount kama unavyotaka
////        payment.setControlNumber(controlNumber);
////        payment.setPaymentStatus(PaymentStatus.PENDING);
////        payment.setPaymentDate(LocalDateTime.now());
////
////        return paymentRepository.save(payment);
////    }
////
////    // Generator ya control number (random 12 chars)
////    public String generateControlNumber() {
////        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
////    }
////
////    // Verify payment by control number
////    @Override
////    public boolean verifyPayment(String controlNumber) {
////        Optional<ServicePayment> optionalPayment = paymentRepository.findByControlNumber(controlNumber);
////
////        if (optionalPayment.isPresent()) {
////            ServicePayment payment = optionalPayment.get();
////            if (payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
////                // payment tayari ime-verified, return true
////                return true;
////            }
////            payment.setPaymentStatus(PaymentStatus.VERIFIED);
////            // optionally set payment reference here if you want
////            paymentRepository.save(payment);
////            return true;
////        }
////
////        return false;
////    }
////
////    // Fetch payment by control number (optional method)
////    @Override
////    public ServicePayment getPaymentByControlNumber(String controlNumber) {
////        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
////    }
////}
//
//@Service
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto, String controlNumber) {
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestId())
//                .orElseThrow(() -> new IllegalArgumentException("RequestForm not found"));
//
//        ServicePayment payment = new ServicePayment();
//        payment.setRequestForm(requestForm);
//        payment.setServiceType(dto.getServiceType());
//        payment.setPhone(dto.getPhone());
//        payment.setPaymentMethod(dto.getPaymentMethod());
//        payment.setAmount(new BigDecimal("50000"));
//        payment.setAmountPaid(BigDecimal.valueOf(dto.getAmount()));
//        payment.setControlNumber(controlNumber);
//        payment.setPaymentStatus(PaymentStatus.PENDING);
//
//        return paymentRepository.save(payment);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber)
//                .map(payment -> {
//                    payment.setPaymentStatus(PaymentStatus.VERIFIED);
//                    paymentRepository.save(payment);
//                    return true;
//                })
//                .orElse(false);
//    }
//
//    @Override
//    public List<ServicePaymentDTO> getAllPayments() {
//        return null;
//    }
//
//    public List<ServicePayment> getAllPaymentsWithRequestForms() {
//        return paymentRepository.findAllWithRequestForms();
//    }
//
//    @Override
//    public ServicePaymentDTO createPayment(RequestPaymentDTO dto) {
//        return null;
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//}MUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
//package com.zawadig.myafwanii.Service;
//
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Model.RequestForm;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.Repository.RequestFormRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.dto.ServicePaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.UUID;
//import java.util.stream.Collectors;
//
//@Service
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Override
//    public ServicePaymentDTO createPayment(RequestPaymentDTO dto) {
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        String controlNumber = "CN-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
//
//        ServicePayment payment = new ServicePayment();
//        payment.setControlNumber(controlNumber);
//        payment.setAmount(dto.getAmount());
//        payment.setPaymentMethod(dto.getPaymentMethod());
//        payment.setPaymentStatus(PaymentStatus.valueOf("PENDING"));
//        payment.setRequestForm(requestForm);
//        payment.setPaymentDate(LocalDateTime.now());
//
//        ServicePayment savedPayment = paymentRepository.save(payment);
//        return convertToDTO(savedPayment);
//    }
//
//    @Override
//    public ServicePaymentDTO getPaymentByControlNumber(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//                .orElseThrow(() -> new RuntimeException("Payment not found"));
//        return convertToDTO(payment);
//    }
//
//    @Override
//    public String generateControlNumber() {
//        return null;
//    }
//
//    @Override
//    public ServicePaymentDTO verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//                .orElseThrow(() -> new RuntimeException("Payment not found"));
//
//        payment.setPaymentStatus(PaymentStatus.valueOf("VERIFIED"));
//        ServicePayment verifiedPayment = paymentRepository.save(payment);
//        return convertToDTO(verifiedPayment);
//    }
//
//    @Override
//    public List<ServicePaymentDTO> getAllPayments() {
//        return paymentRepository.findAll().stream()
//                .map(this::convertToDTO)
//                .collect(Collectors.toList());
//    }
//
//    private ServicePaymentDTO convertToDTO(ServicePayment payment) {
//        ServicePaymentDTO dto = new ServicePaymentDTO();
//        dto.setId(payment.getId());
//        dto.setControlNumber(payment.getControlNumber());
//        dto.setAmount(payment.getAmount());
//        dto.setPaymentMethod(payment.getPaymentMethod());
//        dto.setPaymentStatus(payment.getPaymentStatus());
//        dto.setPaymentDate(payment.getPaymentDate());
//        dto.setCreatedAt(payment.getCreatedAt());
//
//        if (payment.getRequestForm() != null) {
//            dto.setRequestFormId(payment.getRequestForm().getId());
//            if (payment.getRequestForm().getCustomer() != null) {
//                dto.setCustomerName(payment.getRequestForm().getCustomer().getName());
//            }
//            dto.setServiceType(payment.getRequestForm().getServiceType());
//        }
//
//        return dto;
//    }
//

//package com.zawadig.myafwanii.Service;
//
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.math.BigDecimal;
//import java.time.LocalDateTime;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        ServicePayment payment = ServicePayment.builder()
//            .requestId(dto.getRequestId())
//            .customerId(dto.getCustomerId())
//            .serviceType(dto.getServiceType())
//            .phone(dto.getPhone())
//            .paymentMethod(dto.getPaymentMethod())
//            .amount(BigDecimal.valueOf(dto.getAmount()))  // Convert Double to BigDecimal
//            .amountPaid(BigDecimal.valueOf(dto.getAmount()))  // Assuming full payment
//            .controlNumber(generateControlNumber())
//            .paymentStatus(PaymentStatus.PENDING)
//            .paymentDate(LocalDateTime.now())
//            .build();
//
//        return paymentRepository.save(payment);
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//            .orElse(null);
//
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        paymentRepository.save(payment);
//        return true;
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }






import com.zawadig.myafwanii.Model.RequestForm;
import com.zawadig.myafwanii.Model.ServicePayment;


import org.springframework.transaction.annotation.Transactional;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.math.BigDecimal;
//import java.time.LocalDateTime;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        requestForm.getPayments().add(payment);
//        return paymentRepository.save(payment);
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//                .orElse(null);
//
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment) != null;
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//}













































































//import com.zawadig.myafwanii.Model.Customer;
//import com.zawadig.myafwanii.Model.RequestForm;
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Repository.RequestFormRepository;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.time.LocalDateTime;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        // 1. Pata request form
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId()
//
//                .orElseThrow(() -> new RuntimeException("Request form not found")));
//
//        // 2. Pata customer kutoka kwenye request form
//        Customer customer = requestForm.getCustomer();
//        if (customer == null) {
//            throw new RuntimeException("Customer for this request not found");
//        }
//
//        // 3. Tengeneza ServicePayment na customer
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .customer(customer) // ✅ muhimu sana kuweka hii
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        // 4. Optional: add payment to requestForm (bi-directional)
//        requestForm.getPayments().add(payment);
//
//        // 5. Save
//        return paymentRepository.save(payment);
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//                .orElse(null);
//
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment) != null;
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//}









//import com.zawadig.myafwanii.Model.Customer;
//import com.zawadig.myafwanii.Model.RequestForm;
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Repository.RequestFormRepository;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.time.LocalDateTime;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        // 1. Pata request form kwa kutumia requestFormId (sawa na camelCase)
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        // 2. Pata customer kutoka kwenye request form
//        Customer customer = requestForm.getCustomer();
//        if (customer == null) {
//            throw new RuntimeException("Customer for this request not found");
//        }
//
//        // 3. Tengeneza ServicePayment na customer
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .customer(customer) // Muhimu kuweka hii ili reference iwepo
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        // 4. Ongeza malipo kwenye list ya payments ya requestForm (bi-directional)
//        requestForm.getPayments().add(payment);
//
//        // 5. Hifadhi malipo kwenye DB
//        return paymentRepository.save(payment);
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//                .orElse(null);
//
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment) != null;
//    }
//
//    @Override
//    public List<ServicePayment> getAllPayments() {
//        return paymentRepository.findAll();
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//}





//import com.zawadig.myafwanii.Model.Customer;
//import com.zawadig.myafwanii.Model.RequestForm;
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Repository.RequestFormRepository;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        if (dto == null) {
//            throw new IllegalArgumentException("Payment request data cannot be null");
//        }
//
//        // 1. Tafuta request form
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        // 2. Pata mteja
//        Customer customer = requestForm.getCustomer();
//        if (customer == null) {
//            throw new RuntimeException("Customer for this request not found");
//        }
//
//        // 3. Unda malipo
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .customer(customer)
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        // 4. Ongeza kwenye list ya malipo ya requestForm
//        requestForm.getPayments().add(payment);
//
//        // 5. Hifadhi malipo
//        return paymentRepository.save(payment);
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber)
//                .orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//                .orElse(null);
//
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment) != null;
//    }
//
//    @Override
//    public List<ServicePayment> getAllPayments() {
//        return paymentRepository.findAll();
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//}






//import com.zawadig.myafwanii.Model.Customer;
//import com.zawadig.myafwanii.Model.RequestForm;
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Repository.RequestFormRepository;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//import jakarta.mail.MessagingException;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Autowired
//    private EmailService emailService; // ✅ Add email service
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        if (dto == null) {
//            throw new IllegalArgumentException("Payment request data cannot be null");
//        }
//
//        // 1. Tafuta request form
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        // 2. Pata mteja
//        Customer customer = requestForm.getCustomer();
//        if (customer == null) {
//            throw new RuntimeException("Customer for this request not found");
//        }
//
//        // 3. Unda malipo
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .customer(customer)
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        // 4. Ongeza kwenye list ya malipo ya requestForm
//        requestForm.getPayments().add(payment);
//
//        // 5. Hifadhi malipo
//        ServicePayment savedPayment = paymentRepository.save(payment);
//
//        // 6. Tuma email kwa mteja
//        try {
//            String subject = "ZAWA - Payment Confirmation";
//            String body = "<p>Dear " + customer.getFullName() + ",</p>"
//                    + "<p>Thank you for your service request payment.</p>"
//                    + "<p><strong>Service:</strong> " + payment.getServiceType() + "<br>"
//                    + "<strong>Amount:</strong> " + payment.getAmount() + "<br>"
//                    + "<strong>Control Number:</strong> " + payment.getControlNumber() + "</p>"
//                    + "<p>We will process your request shortly.</p>"
//                    + "<br><p>Regards,<br>ZAWA Team</p>";
//
//            emailService.sendSimpleEmail(customer.getEmail(), subject, body);
//
//        } catch (MessagingException e) {
//            System.out.println("Failed to send email: " + e.getMessage());
//        }
//
//        return savedPayment;
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber)
//                .orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
//                .orElse(null);
//
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment) != null;
//    }
//
//    @Override
//    public List<ServicePayment> getAllPayments() {
//        return paymentRepository.findAll();
//    }
//
//    @Override
//    public List<ServicePayment> getVerifiedPayments() {
//        return null;
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//}































//import com.zawadig.myafwanii.Model.Customer;
//import com.zawadig.myafwanii.Model.RequestForm;
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Repository.RequestFormRepository;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//import jakarta.mail.MessagingException;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Autowired
//    private EmailService emailService;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        if (dto == null) {
//            throw new IllegalArgumentException("Payment request data cannot be null");
//        }
//
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        Customer customer = requestForm.getCustomer();
//        if (customer == null) {
//            throw new RuntimeException("Customer for this request not found");
//        }
//
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .customer(customer)
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        requestForm.getPayments().add(payment);
//        ServicePayment savedPayment = paymentRepository.save(payment);
//
//        try {
//            String subject = "ZAWA - Payment Confirmation";
//            String body = "<p>Dear " + customer.getFullName() + ",</p>"
//                    + "<p>Thank you for your service request payment.</p>"
//                    + "<p><strong>Service:</strong> " + payment.getServiceType() + "<br>"
//                    + "<strong>Amount:</strong> " + payment.getAmount() + "<br>"
//                    + "<strong>Control Number:</strong> " + payment.getControlNumber() + "</p>"
//                    + "<p>We will process your request shortly.</p>"
//                    + "<br><p>Regards,<br>ZAWA Team</p>";
//
//            emailService.sendSimpleEmail(customer.getEmail(), subject, body);
//
//        } catch (MessagingException e) {
//            System.out.println("Failed to send email: " + e.getMessage());
//        }
//
//        return savedPayment;
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber).orElse(null);
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment) != null;
//    }
//
//    @Override
//    public List<ServicePayment> getAllPayments() {
//        return paymentRepository.findAll();
//    }
//
//    @Override
//    public List<ServicePayment> getVerifiedPayments() {
//        return ServicePaymentRepository.findByPaymentStatus(PaymentStatus.VERIFIED);
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//}































//
//import com.zawadig.myafwanii.Model.Customer;
//import com.zawadig.myafwanii.Model.RequestForm;
//import com.zawadig.myafwanii.Model.ServicePayment;
//import com.zawadig.myafwanii.Repository.RequestFormRepository;
//import com.zawadig.myafwanii.Repository.ServicePaymentRepository;
//import com.zawadig.myafwanii.dto.RequestPaymentDTO;
//import com.zawadig.myafwanii.enums.PaymentStatus;
//import jakarta.mail.MessagingException;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Autowired
//    private EmailService emailService;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        if (dto == null) {
//            throw new IllegalArgumentException("Payment request data cannot be null");
//        }
//
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        Customer customer = requestForm.getCustomer();
//        if (customer == null) {
//            throw new RuntimeException("Customer for this request not found");
//        }
//
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .customer(customer)
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        requestForm.getPayments().add(payment);
//        ServicePayment savedPayment = paymentRepository.save(payment);
//
//        try {
//            String subject = "ZAWA - Payment Confirmation";
//            String body = "<p>Dear " + customer.getFullName() + ",</p>"
//                    + "<p>Thank you for your service request payment.</p>"
//                    + "<p><strong>Service:</strong> " + payment.getServiceType() + "<br>"
//                    + "<strong>Amount:</strong> " + payment.getAmount() + "<br>"
//                    + "<strong>Control Number:</strong> " + payment.getControlNumber() + "</p>"
//                    + "<p>We will process your request shortly.</p>"
//                    + "<br><p>Regards,<br>ZAWA Team</p>";
//
//            emailService.sendSimpleEmail(customer.getEmail(), subject, body);
//
//        } catch (MessagingException e) {
//            System.out.println("Failed to send email: " + e.getMessage());
//        }
//
//        return savedPayment;
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public boolean verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber).orElse(null);
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return false;
//        }
//
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment) != null;
//    }
//
//    @Override
//    public List<ServicePayment> getAllPayments() {
//        return paymentRepository.findAll();
//    }
//
//    @Override
//    public List<ServicePayment> getVerifiedPayments() {
//        return paymentRepository.findByPaymentStatus(PaymentStatus.VERIFIED);
//    }
//
//    @Override
//    public List<ServicePayment> getVerifiedPaymentsByCustomerId(Long customerId) {
//        List<ServicePayment> all = paymentRepository.findByCustomerIdAndPaymentStatus(customerId, PaymentStatus.VERIFIED);
//        return all != null ? all : List.of();
//    }
//
//    @Override
//    public ServicePayment getLatestPaymentByRequestFormAndCustomer(Long requestFormId, Long customerId) {
//        return paymentRepository
//                .findTopByRequestForm_IdAndCustomer_IdOrderByPaymentDateDesc(requestFormId, customerId)
//                .orElse(null);
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//} muimuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu






//
//import com.itextpdf.text.*;
//import com.itextpdf.text.pdf.*;
//import com.zawadig.myafwanii.Model.Customer;
//
//import java.io.ByteArrayOutputStream;
//import java.io.IOException;
//import java.util.List;
//import java.util.UUID;
//
//@Service
//@Transactional
//public class ServicePaymentServiceImpl implements ServicePaymentService {
//
//    @Autowired
//    private ServicePaymentRepository paymentRepository;
//
//    @Autowired
//    private RequestFormRepository requestFormRepository;
//
//    @Autowired
//    private EmailService emailService;
//
//    @Override
//    public ServicePayment createPayment(RequestPaymentDTO dto) {
//        if (dto == null) {
//            throw new IllegalArgumentException("Payment request data cannot be null");
//        }
//
//        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
//                .orElseThrow(() -> new RuntimeException("Request form not found"));
//
//        Customer customer = requestForm.getCustomer();
//        if (customer == null) {
//            throw new RuntimeException("Customer for this request not found");
//        }
//
//        ServicePayment payment = ServicePayment.builder()
//                .requestForm(requestForm)
//                .customer(customer)
//                .serviceType(dto.getServiceType())
//                .phone(dto.getPhone())
//                .paymentMethod(dto.getPaymentMethod())
//                .amount(dto.getAmount())
//                .amountPaid(dto.getAmount())
//                .controlNumber(generateControlNumber())
//                .paymentStatus(PaymentStatus.PENDING)
//                .paymentDate(LocalDateTime.now())
//                .build();
//
//        requestForm.getPayments().add(payment);
//        ServicePayment savedPayment = paymentRepository.save(payment);
//
//        try {
//            // Generate PDF receipt as byte array
//            byte[] pdfReceipt = generatePaymentReceiptPdf(savedPayment);
//
//            String subject = "ZAWA - Payment Confirmation";
//            String body = "<p>Dear " + customer.getFullName() + ",</p>"
//                    + "<p>Thank you for your service request payment.</p>"
//                    + "<p><strong>Service:</strong> " + payment.getServiceType() + "<br>"
//                    + "<strong>Amount:</strong> " + payment.getAmount() + "<br>"
//                    + "<strong>Control Number:</strong> " + payment.getControlNumber() + "</p>"
//                    + "<p>We will process your request shortly.</p>"
//                    + "<br><p>Regards,<br>ZAWA Team</p>";
//
//            // Send email with PDF attachment
//            emailService.sendEmailWithAttachment(
//                    customer.getEmail(),
//                    subject,
//                    body,
//                    pdfReceipt,
//                    "receipt_" + payment.getControlNumber() + ".pdf"
//            );
//
//        } catch (IOException | DocumentException e) {
//            System.out.println("Failed to send email with PDF receipt: " + e.getMessage());
//        }
//
//        return savedPayment;
//    }
//
//    @Override
//    public ServicePayment getPaymentByControlNumber(String controlNumber) {
//        return paymentRepository.findByControlNumber(controlNumber).orElse(null);
//    }
//
//    @Override
//    public ServicePayment verifyPayment(String controlNumber) {
//        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber).orElse(null);
//        if (payment == null || payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
//            return null; // <-- Badala ya kurudi false, rudisha null
//        }
//        payment.setPaymentStatus(PaymentStatus.VERIFIED);
//        return paymentRepository.save(payment); // <-- Rudisha payment object moja kwa moja
//    }
//    @Override
//    public List<ServicePayment> getAllPayments() {
//        return paymentRepository.findAll();
//    }
//
//    @Override
//    public List<ServicePayment> getVerifiedPayments() {
//        return paymentRepository.findByPaymentStatus(PaymentStatus.VERIFIED);
//    }
//
//    @Override
//    public List<ServicePayment> getVerifiedPaymentsByCustomerId(Long customerId) {
//        List<ServicePayment> all = paymentRepository.findByCustomerIdAndPaymentStatus(customerId, PaymentStatus.VERIFIED);
//        return all != null ? all : List.of();
//    }
//
//    @Override
//    public ServicePayment getLatestPaymentByRequestFormAndCustomer(Long requestFormId, Long customerId) {
//        return paymentRepository
//                .findTopByRequestForm_IdAndCustomer_IdOrderByPaymentDateDesc(requestFormId, customerId)
//                .orElse(null);
//    }
//    public List<ServicePayment> getPaymentHistoryByCustomerId(Long customerId) {
//        List<ServicePayment> payments = paymentRepository.findByCustomerId(customerId);
//        return payments != null ? payments : Collections.emptyList(); // Hakikisha hurudi list tupu
//    }
//
//    @Override
//    public void savePayment(ServicePayment payment) {
//
//    }
//
//    private String generateControlNumber() {
//        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
//    }
//
//    // Private method to generate PDF receipt
//    private byte[] generatePaymentReceiptPdf(ServicePayment payment) throws DocumentException, IOException {
//        Document document = new Document();
//        ByteArrayOutputStream baos = new ByteArrayOutputStream();
//        PdfWriter.getInstance(document, baos);
//
//        document.open();
//
//        Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
//        Font normalFont = new Font(Font.FontFamily.HELVETICA, 12);
//
//        document.add(new Paragraph("ZAWA - Receipt ya Malipo", titleFont));
//        document.add(Chunk.NEWLINE);
//
//        document.add(new Paragraph("Control Number: " + payment.getControlNumber(), normalFont));
//        document.add(new Paragraph("Jina la Mteja: " + payment.getCustomer().getFullName(), normalFont));
//        document.add(new Paragraph("Huduma: " + payment.getServiceType(), normalFont));
//        document.add(new Paragraph("Kiasi Kilicholipwa: TZS " + payment.getAmountPaid(), normalFont));
//        document.add(new Paragraph("Njia ya Malipo: " + payment.getPaymentMethod(), normalFont));
//        document.add(new Paragraph("Tarehe ya Malipo: " + payment.getPaymentDate(), normalFont));
//
//        document.close();
//
//        return baos.toByteArray();
//    }
//
//
//}  muuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuimuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu 2






































import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.zawadig.myafwanii.Model.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

@Service
@Transactional
public class ServicePaymentServiceImpl implements ServicePaymentService {

    @Autowired
    private ServicePaymentRepository paymentRepository;

    @Autowired
    private RequestFormRepository requestFormRepository;

    @Autowired
    private EmailService emailService;

    @Override
    public ServicePayment createPayment(RequestPaymentDTO dto) {
        if (dto == null) {
            throw new IllegalArgumentException("Payment request data cannot be null");
        }

        RequestForm requestForm = requestFormRepository.findById(dto.getRequestFormId())
                .orElseThrow(() -> new RuntimeException("Request form not found"));

        Customer customer = requestForm.getCustomer();
        if (customer == null) {
            throw new RuntimeException("Customer for this request not found");
        }

        ServicePayment payment = ServicePayment.builder()
                .requestForm(requestForm)
                .customer(customer)
                .serviceType(dto.getServiceType())
                .phone(dto.getPhone())
                .paymentMethod(dto.getPaymentMethod())
                .amount(dto.getAmount())
                .amountPaid(dto.getAmount())
                .controlNumber(generateControlNumber())
                .paymentStatus(PaymentStatus.PENDING)
                .paymentDate(LocalDateTime.now())
                .build();

        requestForm.getPayments().add(payment);
        ServicePayment savedPayment = paymentRepository.save(payment);

        try {
            // Generate PDF receipt as byte array
            byte[] pdfReceipt = generatePaymentReceiptPdf(savedPayment);

            String subject = "ZAWA - Payment Confirmation";
            String body = "<p>Dear " + customer.getFullName() + ",</p>"
                    + "<p>Thank you for your service request payment.</p>"
                    + "<p><strong>Service:</strong> " + payment.getServiceType() + "<br>"
                    + "<strong>Amount:</strong> " + payment.getAmount() + "<br>"
                    + "<strong>Control Number:</strong> " + payment.getControlNumber() + "</p>"
                    + "<p>We will process your request shortly.</p>"
                    + "<br><p>Regards,<br>ZAWA Team</p>";

            // Send email with PDF attachment
            emailService.sendEmailWithAttachment(
                    customer.getEmail(),
                    subject,
                    body,
                    pdfReceipt,
                    "receipt_" + payment.getControlNumber() + ".pdf"
            );

        } catch (IOException | DocumentException e) {
            System.out.println("Failed to send email with PDF receipt: " + e.getMessage());
        }

        return savedPayment;
    }

    @Override
    public ServicePayment getPaymentByControlNumber(String controlNumber) {
        return paymentRepository.findByControlNumber(controlNumber)
                .orElseThrow(() -> new RuntimeException("Payment not found"));
    }

    @Override
    public ServicePayment verifyPayment(String controlNumber) {
        ServicePayment payment = paymentRepository.findByControlNumber(controlNumber)
                .orElseThrow(() -> new RuntimeException("Payment not found"));

        if (payment.getPaymentStatus() == PaymentStatus.VERIFIED) {
            throw new RuntimeException("Payment already verified");
        }

        payment.setPaymentStatus(PaymentStatus.VERIFIED);
        payment.setVerificationDate(LocalDateTime.now());
        return paymentRepository.save(payment);
    }

    @Override
    public List<ServicePayment> getAllPayments() {
        return paymentRepository.findAll();
    }

    @Override
    public List<ServicePayment> getVerifiedPayments() {
        return paymentRepository.findByPaymentStatus(PaymentStatus.VERIFIED);
    }

    @Override
    public List<ServicePayment> getVerifiedPaymentsByCustomerId(Long customerId) {
        List<ServicePayment> payments = paymentRepository.findByCustomerIdAndPaymentStatus(customerId, PaymentStatus.VERIFIED);
        return payments != null ? payments : Collections.emptyList();
    }

    @Override
    public ServicePayment getLatestPaymentByRequestFormAndCustomer(Long requestFormId, Long customerId) {
        return paymentRepository
                .findTopByRequestForm_IdAndCustomer_IdOrderByPaymentDateDesc(requestFormId, customerId)
                .orElse(null);
    }

    @Override
    public List<ServicePayment> getPaymentHistoryByCustomerId(Long customerId) {
        List<ServicePayment> payments = paymentRepository.findByCustomerId(customerId);
        return payments != null ? payments : Collections.emptyList();
    }

    @Override
    public ServicePayment updatePdfReference(String controlNumber, String pdfReference) {
        ServicePayment payment = getPaymentByControlNumber(controlNumber);
        payment.setPdfReference(pdfReference);
        return paymentRepository.save(payment);
    }

    @Override
    public ServicePayment savePayment(ServicePayment payment) {
        return paymentRepository.save(payment);
    }

    private String generateControlNumber() {
        return UUID.randomUUID().toString().replace("-", "").substring(0, 12).toUpperCase();
    }

    private byte[] generatePaymentReceiptPdf(ServicePayment payment) throws DocumentException, IOException {
        Document document = new Document();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PdfWriter.getInstance(document, baos);

        document.open();

        Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
        Font normalFont = new Font(Font.FontFamily.HELVETICA, 12);

        document.add(new Paragraph("ZAWA - Receipt ya Malipo", titleFont));
        document.add(Chunk.NEWLINE);

        document.add(new Paragraph("Control Number: " + payment.getControlNumber(), normalFont));
        document.add(new Paragraph("Jina la Mteja: " + payment.getCustomer().getFullName(), normalFont));
        document.add(new Paragraph("Huduma: " + payment.getServiceType(), normalFont));
        document.add(new Paragraph("Kiasi Kilicholipwa: TZS " + payment.getAmountPaid(), normalFont));
        document.add(new Paragraph("Njia ya Malipo: " + payment.getPaymentMethod(), normalFont));
        document.add(new Paragraph("Tarehe ya Malipo: " + payment.getPaymentDate(), normalFont));

        document.close();

        return baos.toByteArray();
    }
}
